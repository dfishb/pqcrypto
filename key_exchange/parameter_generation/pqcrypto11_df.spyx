
# Copyright (c) 2011 Luca De Feo.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from gfp2 cimport *
#from other cimport *
from sage.rings.ring cimport Field
from sage.structure.element cimport Element, FieldElement, ModuleElement, RingElement
from sage.structure.sage_object cimport SageObject
from sage.rings.finite_rings.element_base cimport FinitePolyExtElement
from sage.rings.finite_rings.finite_field_base cimport FiniteField as FiniteField_base
from sage.rings.finite_rings.finite_field_ext_pari import FiniteField_ext_pari
import cython

from sage.rings.finite_rings.constructor import FiniteField
from sage.rings.integer cimport Integer
from sage.libs.pari.gen import pari
from sage.misc.latex import latex
from sage.rings.all import PolynomialRing
from sage.schemes.elliptic_curves.constructor import EllipticCurve
from sage.categories.finite_fields import FiniteFields
from sage.rings.arith import is_square
from sage.misc.functional import is_odd



########################################################################################
#   Dieter's classes. These are stripped down versions of the original wrapper classes #
########################################################################################

cdef class MontgomeryPoint
cdef class MontgomeryCurve

#wraps a GF object
cdef class GFW(object):
    cdef GF rep
	
   # def __init__(self):
 
     #   cdef GF_params field1
     #   setup_GF(&field1, "7")
     #   init_GF(&self.rep, &field1)
		
    #    set_GF(&self.rep, "0", "0")

    @cython.profile(True)
    cpdef set_GFW(self, char * a, char * b, char * characteristic):


			   
        cdef GF_params field1
        setup_GF(&field1, characteristic)
        init_GF(&self.rep, &field1)
		
        set_GF(&self.rep, a, b)


    @cython.profile(True)
    cdef create(self, GF a ):
        copy_GF(&self.rep, a)	
		
    @cython.profile(True)		
    cpdef printGFW(self, string):
        print_GF( self.rep, string )

    @cython.profile(True)		
    cpdef printGFWc(self, string):
        print("%s: %s", getChar(&self.rep), string)
       # printChar( self.rep )
        print " "

    #doesnt seem to work :(
    @cython.profile(True)
    cpdef add(self, GFW other):
        print_GF(other.rep,"S")
        add_GF( &self.rep, self.rep, other.rep)
		
    @cython.profile(True)
    cpdef copy(self):
		
        x = GFW()
        copy_GF(&x.rep, self.rep)
        return x
		
    cdef new_c(self):
        
        cdef GFW x
        x = PY_NEW(GFW)
        copy_GF(&(x.rep), self.rep)	
        set_GF(&(x.rep), "0", "0")
        return x
		
    @cython.profile(True)
    cpdef equals(self, GFW other):
        cdef GFW tmp1
		
        tmp1 = GFW()
        sub_GF(&tmp1.rep, self.rep, other.rep)

		
        return is_zero_GF(tmp1.rep)


	

cdef class MCurve(object):

    cdef GFW A
    cdef GFW B
	#cpdef MyGFp2 base_Field
    cdef GFW A24
	
    def __init__(self):

        self.A = GFW()
        self.B = GFW()
        self.A24 = GFW()
        #self.A.set_GFW(0,0,7)
        #self.B.set_GFW(0,0,7)
        #self.A24.set_GFW(0,0,7)

    @cython.profile(True)
    cpdef  createGFW(self, GFW a, GFW b, GFW c):
        self.B = b
        self.A = a
        self.A24 = c

  #initializes variables and calculates A24 = (A+2)/4. Doesnt work -easy to fix though
    @cython.profile(True)
    cdef void createGF(self, GF a, GF b, GF c):
        self.B.create(b)
        self.A.create(a)
        self.A24.create(c)


    @cython.profile(True)
    cdef void setA24(self, GFW _a, GFW _b):
	
        cdef GF a = _a.rep
        cdef GF b = _b.rep
		
        cdef GF tmp1, tmp2, tmp3
        cdef char * characteristic = getChar(&a) 
		
        cdef GF_params field1 
        setup_GF(&field1, characteristic)
        init_GF(&tmp1, &field1)
		
        cdef GF_params field2 
        setup_GF(&field2,characteristic)
        init_GF(&tmp2, &field2)
		
        cdef GF_params field3 
        setup_GF(&field3, characteristic)
        init_GF(&tmp3, &field3)
        
        set_GF(&tmp1, "0", "2")
        set_GF(&tmp2, "0", "4")
        inv_GF(&tmp2, tmp2)
			
        add_GF(&tmp3, a, tmp1) 
        mul_GF(&tmp3, tmp2, tmp3)
		
        self.A24.create(tmp3)

    @cython.profile(True)
    cpdef set_GFW(self, GFW a, GFW b):
        self.A = a
        self.B = b

        self.setA24(a,b)
    
	#for testing
    @cython.profile(True)
    cpdef testCurve(self):
        
        cdef GF tmp1, tmp2
		
        cdef GF_params field1 
        setup_GF(&field1,"7")
        init_GF(&tmp1, &field1)
		
        cdef GF_params field2 
        setup_GF(&field2, "7")
        init_GF(&tmp2, &field2)

        set_GF(&tmp1, "1", "0")  
        set_GF(&tmp2, "1", "5") 
		
        self.create(tmp1, tmp2)
		
        self.A.printGFW("A" )
        self.B.printGFW("B" )
        self.A24.printGFW( "A24" )
 
    #@cython.profile(True)
    #cpdef getCurve(self):
		
    @cython.profile(True)
    cpdef getCurve(self):
        
        self.A.printGFW("A" )
        self.B.printGFW("B" )
        self.A24.printGFW("A24: " )
    
    @cython.profile(True)
    cpdef copy(self):
        cdef MCurve curve 
        curve = MCurve()
        curve.A = self.A.copy()
        curve.B = self.B.copy()
        curve.A24 = self.A24.copy()

    @cython.profile(True)
    cpdef GFW j_invariant(self):
	
        cdef GFW tmp1, tmp2, tmp3, denom, num, final
	
        tmp1 = GFW()
        tmp2 = GFW() 
        tmp3 = GFW()
        denom = GFW()
        num = GFW()
        final = GFW()
	
        sqr_GF(&tmp1.rep,self.A.rep)
	
        sub_GF_ui( &denom.rep, tmp1.rep,4 )
	
        sub_GF_ui( &tmp2.rep, tmp1.rep,3 )
	
        sqr_GF( &tmp3.rep, tmp2.rep )
        mul_GF( &tmp1.rep, tmp3.rep,tmp2.rep )
        scalar_GF_si(&num.rep, tmp1.rep, 256)
	
        div_GF( &final.rep, num.rep,denom.rep )
		
        return final
   
   
   #return 256*(self.A.square() - 3)**3/(self.A.square() - 4)
        





cdef class MPoint(object):

    cdef GFW x
    cdef GFW y
    cdef GFW z
    cdef MCurve curve

    def __init__(self):

        self.x = GFW()
        self.y = GFW()
        self.z = GFW()
        self.curve = MCurve()

    cdef void setCurve(self,MCurve curve):
        self.curve = curve

    @cython.profile(True)
    cpdef set_GFW(self, GFW a, GFW c, MCurve curve):
        self.x = a
       # self.y = b
        self.z = c
        self.curve = curve
	
    @cython.profile(True)
    cpdef set_GFWy(self, GFW a, GFW b, GFW c, MCurve curve):
        self.x = a
        self.y = b
        self.z = c
        self.curve = curve
        
    @cython.profile(True)
    cpdef getXaRep(self):
        printf("spyx\n");
        return getA(&(self.x.rep))
        
    @cython.profile(True)
    cpdef getXbRep(self):
        printf("spyx\n");
        return getB(&(self.x.rep))
        
    @cython.profile(True)
    cpdef getYaRep(self):
        printf("spyx\n");
        return getA(&(self.y.rep))
        
    @cython.profile(True)
    cpdef getYbRep(self):
       return getB(&(self.y.rep))

    @cython.profile(True)
    cpdef getZaRep(self):
       printf("spyx\n");
       return getA(&(self.z.rep))
        
    @cython.profile(True)
    cpdef getZbRep(self):
        printf("spyx\n");
        return getB(&(self.z.rep))
        
    @cython.profile(True)
    cpdef getCurveAa(self):
       printf("spyx\n");
       return getA(&(self.curve.A.rep))
        
    @cython.profile(True)
    cpdef getCurveAb(self):
        printf("spyx\n");
        return getB(&(self.curve.A.rep))
        
    @cython.profile(True)
    cpdef getCurveBa(self):
        printf("spyx\n");
        return getA(&(self.curve.B.rep))
        
    @cython.profile(True)
    cpdef getCurveBb(self):
        printf("spyx\n");
        return getB(&(self.curve.B.rep))
        
    @cython.profile(True)
    cpdef getCurveA24a(self):
        printf("spyx\n");
        return getA(&(self.curve.A24.rep))
        
    @cython.profile(True)
    cpdef getCurveA24b(self):
        printf("spyx\n");
        return getB(&(self.curve.A24.rep))



	
    @cython.profile(True)
    cpdef getPoint(self,char * string):
        
        print("%s: ", string)
        self.x.printGFW("x" )
        self.y.printGFW("y" )
        self.z.printGFW("z" )  
        self.curve.getCurve()

    @cython.profile(True)
    cpdef MPoint copy(self):
        
        cdef MPoint point
        point = MPoint()
        point.x = self.x.copy()
        point.y = self.y.copy()
        point.z = self.z.copy()
        point.curve = self.curve.copy()
        
        return point

    @cython.profile(True)
    cpdef MontgomeryPoint getMontgomeryPoint(self):
        cdef MontgomeryPoint mpoint
        cdef GFW x,y,z
        cdef MontgomeryCurve mcurve
        cdef MyGFp2Element mx, my, mz
        cdef MCurve curve
		
        x = self.x
        y = self.y
        z = self.z
        curve = self.curve
	
	#self + P. make sure both curves are the same!!!!
    @cython.profile(True)
    cpdef MPoint add(self, MPoint P):

        cdef GFW y1z2, x1z2, z1z2, u, uu, v, vv, vvv, R, A, x, z, y	
        cdef GFW tmp1, tmp2, tmp3, tmp4
        cdef GF a,b,c
        cdef MPoint point
         
        if self.y is None or P.y is None: 
             raise ValueError, "Cannot add points on the Kummer line."
        
        y1z2 = GFW()
        x1z2 = GFW()
        z1z2 = GFW()
        u = GFW()
        uu = GFW()
        v = GFW()
        vv = GFW()
        vvv = GFW()
        R = GFW()
        A = GFW()
        x = GFW()
        z = GFW()
        y = GFW()
        tmp1 = GFW()
        tmp2 = GFW()
        tmp3 = GFW()
        tmp4 = GFW()
        
        print_GF(self.y.rep,"self.y")
        print_GF(self.x.rep,"self.x")
        print_GF(self.z.rep,"self.z")
        
        
        print_GF(P.y.rep,"p.y")
        print_GF(P.x.rep,"p.x")
        print_GF(P.z.rep,"p.z")
        

        mul_GF( &y1z2.rep, self.y.rep, P.z.rep )
        mul_GF( &x1z2.rep ,self.x.rep,P.z.rep )
        mul_GF( &z1z2.rep ,self.z.rep,P.z.rep )
        
        print_GF(y1z2.rep,"y1z2")
        print_GF(x1z2.rep,"x1z2")
        print_GF(z1z2.rep,"z1z2")
        
        mul_GF( &tmp1.rep, P.y.rep,self.z.rep )
        sub_GF( &u.rep, tmp1.rep,y1z2.rep)
        sqr_GF( &uu.rep, u.rep )
       
        mul_GF( &tmp1.rep, P.x.rep,self.z.rep )
        sub_GF( &v.rep, tmp1.rep,x1z2.rep )
        sqr_GF( &vv.rep, v.rep )
        mul_GF( &vvv.rep, v.rep,vv.rep )
		
        mul_GF( &R.rep, vv.rep,x1z2.rep )
       
        mul_GF( &tmp1.rep, self.curve.B.rep,uu.rep )
        mul_GF( &tmp2.rep, self.curve.A.rep,vv.rep)
        sub_GF( &tmp3.rep, tmp1.rep,tmp2.rep )
        mul_GF( &tmp4.rep, tmp3.rep,z1z2.rep )
        sub_GF( &tmp1.rep, tmp4.rep, vvv.rep )
        scalar_GF_si( &tmp2.rep, R.rep, 2 )
        sub_GF( &A.rep, tmp1.rep,tmp2.rep ) 

        mul_GF(&x.rep, v.rep,A.rep )
        mul_GF(&z.rep, vvv.rep,z1z2.rep )
		
        sub_GF( &tmp1.rep, R.rep,A.rep )
        mul_GF( &tmp2.rep, u.rep,tmp1.rep )
        mul_GF( &tmp3.rep, vvv.rep,y1z2.rep )
        sub_GF( &y.rep, tmp2.rep,tmp3.rep )
		
        print_GF(tmp2.rep,"tmp2")
        
        
        point = MPoint() 
        point.set_GFWy( x,y,z, self.curve)
		
        return point

    @cython.profile(True)
    cpdef MPoint neg(self):
        cdef MPoint point
        cdef GFW y
        
        y = GFW()
        neg_GF( &y.rep ,self.y.rep )
       
        point = MPoint()
        point.set_GFWy( self.x, y, self.z, self.curve )
		
        return point

    #returns self - P
    @cython.profile(True)
    cpdef MPoint sub(self, MPoint P):
        
        cdef MPoint negP
        negP = MPoint()
		
        negP = P.neg()
        return self.add(negP)

cdef class MCW(object):

    cdef MC rep
    
    #returns self - P
    @cython.profile(True)
    cpdef setMCW(self,MCurve curve):
    
        #P = <MP*>malloc(sizeof(MP))
        
        #doesnt matter what inital characteristic things have
        #init_MC(&rep, "7")

        self.rep.A = curve.A.rep
        self.rep.B = curve.B.rep
        self.rep.A24 = curve.A24.rep
        
    @cython.profile(True)
    cpdef printCurve(self):
        print_GF(self.rep.A,"A")
        print_GF(self.rep.B,"B")
        print_GF(self.rep.A24,"A24")
    
        

cdef class MPW(object):

    cdef MP rep
    
    #returns self - P
    @cython.profile(True)
    cpdef setMPW(self,MPoint point):
    
        #P = <MP*>malloc(sizeof(MP))
        
        cdef MCW curve = MCW()
        curve.setMCW(point.curve)
        
        #doesnt matter what inital characteristic things have
        #init_MC(&rep, "7")

        self.rep.x = point.x.rep
        self.rep.y = point.y.rep
        self.rep.z = point.z.rep
        self.rep.curve = curve.rep

    @cython.profile(True)
    cpdef printPoint(self,string):
        print("%s\n",string)
        print_GF(self.rep.x,"x")
        print_GF(self.rep.y,"y")
        print_GF(self.rep.z,"z")
        print_Curve( &(self.rep.curve) )
        print("*************")
        


		
		

		
#############################################################################
#   Cython Wrapper for GF(p^2) arithmetic in gfp2.c                         #
#############################################################################

# This constant is almost useless.  It says how many small scalars of
# GF(p) should be pre-computed and held in memory.
cdef enum:
    precomputed_scalars_bound = 10

cdef class MyGFp2(FiniteField_base):
    """
    This class represents the finite field GF(p^2).  It is mostly a
    wrap-around to make Sage use it as a native finite field.
    """
    cdef readonly GF_params __modulus
    cdef __char
    cdef __pari_impl
    cdef readonly scalars

    # One day, we could use this instead:
    #Element = MyGFp2Element
    def _element_constructor_(self, value=None):
        cdef MyGFp2Element res = MyGFp2Element(self)

        if value is None:
            return res

        # If value is already an element of MyGFp2Element, we simply
        # return it. (elements are immutable)
        if PY_TYPE_CHECK(value, MyGFp2Element):
            return value
        
        # We have precomputed some scalars, for efficiency..D-where are the scalars computed?…they are computed in the constructor for this class (__init__)
        if ((PY_TYPE_CHECK(value, int) or PY_TYPE_CHECK(value, Integer)) and
            abs(value) < precomputed_scalars_bound):
            return self.scalars[value]
        
        # We try to convert to an element of the base field
        try:
            a = self.base()(value)
        except TypeError:
            pass
        else:
            s = '0x' + a.lift().str(16)
            set_GF(&res._rep, '0', s)    #D - wtf is this?
            return res
            
        # We try to convert to Sage's standard representation
        # of GF(p^2), then extract the value
        try:
            x = self.__pari_impl(value)
        except TypeError:
            pass
        else:
            p = x.polynomial()
            return p[1]*self.gen() + p[0]

        raise ValueError, "Cannot coerce element %s to self " % value

    
    def __init__(self, p, names, category=None):
        # if not is_prime(p):
        #     raise ValueError, "Characteristic must be prime"

        self.__char = p
        base = FiniteField(p)

        s = '0x' + p.str(16)           #D - wtf ?
        if not setup_GF(&self.__modulus, s):
            raise ValueError, "This representation of GF(p^2) requires -1 to be a quadratic non-residue modulo p"

        self.__pari_impl = FiniteField_ext_pari(p**2, names, modulus=base[names]([1,0,1]))
        Field.__init__(self, base, names, category=category or FiniteFields())

        self.scalars = ([self(base(i)) for i in range(precomputed_scalars_bound)] +
                        [self(base(i)) for i in range(-precomputed_scalars_bound + 1, 0)])

    def __dealloc__(self):
        free_GF(&self.__modulus)

    cpdef degree(self):
        return 2
    
    cpdef characteristic(self):
        return self.__char

    def __repr__(self):
        return ("Fast and dirty implementation of a finite field in " + str(self._names[0]) + " of size " +
                str(self.characteristic()) + "^" + str(self.degree()))

    cpdef Element random_element(self):
        a = self.base().random_element()
        b = self.base().random_element()
        return self.gen()*a + b

    cpdef _coerce_map_from_(self, S):
        return self.base().has_coerce_map_from(S)

    cpdef gen(self, ignored=None):
        cdef MyGFp2Element res = MyGFp2Element(self)
        set_GF(&res._rep, '1', '0')
        return res

    cpdef order(self):
        return self.__char ** 2

    def polynomial(self, name=None):
        P = self.polynomial_ring(name)
        return P.gen() ** 2 + 1

    # Interaction with pari (for factorization, etc.)
    def _finite_field_ext_pari_(self):
        return self.__pari_impl

    def _finite_field_ext_pari_modulus_as_str(self):
        return self.__pari_impl.modulus()._pari_init_()

    def _pari_modulus(self):
        f = pari(str(self.modulus()))
        return f.subst('x', 'a') * pari("Mod(1,%s)"%self.characteristic())
        

cdef class MyGFp2Element(FinitePolyExtElement):
    """
    This class represents an element of the finite field GF(p^2).  It
    is mostly a wrap-around to make Sage use it as a native object.
    """
    cdef GF _rep
    cdef GF_params* _modulus
    
    def __init__(self, parent=None):
        self._parent = parent
        self._modulus = &(<MyGFp2>parent).__modulus
        init_GF(&self._rep, self._modulus)
        FieldElement.__init__(self, parent)

    cdef MyGFp2Element _new_c(self):
        cdef MyGFp2Element x
        x = PY_NEW(MyGFp2Element)
        x._parent = self._parent
        x._modulus = self._modulus
        init_GF(&x._rep, x._modulus)
        return x
	
    cdef GFW getGFW(self):
        num = GFW()
        num.rep = self._rep
        return num
        
    cpdef ModuleElement copy(self):
        """
        Duplicate an element in a new memory slot. Warning:
          A = B.copy()
        and
          A = B
        do not have the same sematic!
        """
        cdef MyGFp2Element c = self._new_c()
        copy_GF(&c._rep, self._rep)
        return c

    cpdef ModuleElement _add_(self, ModuleElement other):
        cdef MyGFp2Element c = self._new_c()
        add_GF(&c._rep, self._rep, (<MyGFp2Element>other)._rep)
        return c

    cpdef ModuleElement _sub_(self, ModuleElement other):
        cdef MyGFp2Element c = self._new_c()
        sub_GF(&c._rep, self._rep, (<MyGFp2Element>other)._rep)
        return c

    cpdef ModuleElement _neg_(self):
        cdef MyGFp2Element c = self._new_c()
        neg_GF(&c._rep, self._rep)
        return c

    cpdef RingElement _mul_(self, RingElement other):
        cdef MyGFp2Element c = self._new_c()
        mul_GF(&c._rep, self._rep, (<MyGFp2Element>other)._rep)
        return c

    cpdef RingElement square(self):
        cdef MyGFp2Element c = self._new_c()
        sqr_GF(&c._rep, self._rep)
        return c
    
    def __invert__(MyGFp2Element self):
        cdef MyGFp2Element c = self._new_c()
        if not inv_GF(&c._rep, self._rep):
            raise ZeroDivisionError
        return c

    cpdef RingElement _div_(self, RingElement other):
        cdef MyGFp2Element c = self._new_c()
        if not div_GF(&c._rep, self._rep, (<MyGFp2Element>other)._rep):
            raise ZeroDivisionError
        return c
	
    cpdef printRep(self, string):
         print_GF(self._rep,string)

    cpdef MyGFp2Element horner(self, poly):
        """
        A polynomial evaluation at self, implemented by a Horner
        scheme.  The polynomial is given as the list of its
        coefficients.
        """
        cdef MyGFp2Element c = self._new_c()
        cdef MyGFp2Element d = self._new_c()
        for coeff in reversed(poly):
            c *= self
            c += coeff
        return c
    
    def __richcmp__(self, right, int op):
        return (<Element>self)._richcmp(right, op)

    cdef int _cmp_c_impl(self, Element other):
        # Careful: -2 is treated as an exception value upstream
        # so we scale down to -1, 0, 1
        cdef int c = cmp_GF(self._rep, (<MyGFp2Element>other)._rep)
        if c < 0:
            return -1
        elif c > 0:
            return 1
        else:
            return 0

    cpdef polynomial(self, name=None):
        # allocating some strings large enough to hold the result
        sa = '0x' + self._parent.characteristic().str(16)
        sb = '0x' + self._parent.characteristic().str(16)
        get_GF(sa, sb, self._rep)
        a = self._parent.base()(sa)
        b = self._parent.base()(sb)

        P = self._parent.polynomial_ring(name)
        return a*P.gen() + b
    
    def __hash__(self):
        sa = '0x' + self._parent.characteristic().str(16)
        sb = '0x' + self._parent.characteristic().str(16)
        get_GF(sa, sb, self._rep)
        return hash(sa + sb)
    
    cpdef _repr_(self):
        return repr(self.polynomial())
    
    cpdef _latex_(self):
        return latex(self.polynomial())

    def __dealloc__(self):
        clear_GF(&self._rep)

    # Interaction with pari (for factorization, etc.)
    def _finite_field_ext_pari_element(self, k=None):
        K = self._parent._finite_field_ext_pari_()
        if k is not None and k is not K:
            raise TypeError, "Pari finite field not isomorphic to parent"
        
        g = K.gen()
        p = self.polynomial()
        return p[1]*g + p[0]

    def _pari_(self, var=None):
        return pari(self._pari_init_(var))

    # very slow methods, fortunately they are not critical
    def is_square(self):
        p = self._parent.characteristic()
        return self.is_zero() or ((self ** (p-1)) ** ((p+1)/2) == 1)
    
    def sqrt(self, all=False, extend=False):
        if extend:
            raise NotImplementedError
        
        P = PolynomialRing(self._parent, 'X')
        roots = (P.gen()**2 - self).roots()
        if roots:
            if all:
                return [r[0] for r in roots]
            else:
                return roots[0][0]
        else:
            raise ValueError, "must be a perfect square"



#############################################################################
#   Montgomery curves                                                       #
#############################################################################

# Some forward declarations
#cdef class MontgomeryPoint

cdef class MontgomeryCurve(SageObject):
    """
    This class represents a Motgomery curve.
    """
    # EC parameters
    cdef readonly MyGFp2 base_field
    cdef readonly MyGFp2Element A, B
    # private constant needed for arithmetic
    cdef MyGFp2Element A24

    def __init__(self, MyGFp2Element A, MyGFp2Element B):
        self.A = A
        self.B = B
        self.A24 = (A+2)/4
        self.base_field = A._parent

    def __repr__(self):
        return "(%s) y^2 = x^3 + (%s)*x^2 + x" % (self.B, self.A)

    def __contains__(self, MontgomeryPoint P):
        if P.y is None:
            return is_square((P.x**3 + self.A*P.x**2*P.z + P.x*P.z**2) * (self.B*P.z))
        else:
            return (P.x**3 + self.A*P.x**2*P.z + P.x*P.z**2 - self.B*P.y.square()*P.z).is_zero()

    cpdef printCurve(self, string):
        print("%s\n",string)
        print_GF(self.A._rep,"A")
        print_GF(self.B._rep,"B")
        print_GF(self.A24._rep,"A24")
	
    cpdef MyGFp2Element j_invariant(self):
        return 256*(self.A.square() - 3)**3/(self.A.square() - 4)

    cpdef quadratic_twist(self, c=None):
        if c is None:
            c = self.base_field.one()
            while c.is_square():
                c = self.base_field.random_element()
        return MontgomeryCurve(self.A, self.B*c)

    def WeierstrassModel(self):
        cdef MyGFp2Element iB = ~self.B
        return EllipticCurve([0, self.A*iB, 0, iB.square(), 0])

    cpdef MontgomeryPoint zero(self):
        return MontgomeryPoint(self, self.base_field.zero(), self.base_field.zero(), self.base_field.one())

    cpdef MontgomeryPoint random_point(self):
        cdef MontgomeryPoint P
        P = MontgomeryPoint(self,
                            self.base_field.one(),
                            self.base_field.random_element())
        while P not in self:
            P = MontgomeryPoint(self,
                                self.base_field.one(),
                                self.base_field.random_element())
        return P

 	
cpdef MontgomeryCurve MontgomeryCurve_from_j(MyGFp2Element j):
    """
    Create, if it exists, a Montgomery curve with given j-invariant.
    """
    cdef MyGFp2Element A
    
    P = PolynomialRing(j.parent(), 'X')
    roots = (256*(P.gen() - 3)**3 - j*P.gen() + 4*j).roots()
    if roots:
        try:
            A = roots[0][0].sqrt()
        except ValueError:
            pass
        else:
            return MontgomeryCurve(A, A.parent().one())

    raise ValueError, "No Montgomery curve with this j-invariant."

    
cdef class MontgomeryPoint(SageObject):
    """
    A point of a Montgomery curve. Either in Montgomery XZ
    coordinates, or in projective XYZ coordinates (the choice of
    coordinates is handled mostly transparently to the user).

    Operations are faster in Montgomery than in projective
    coordinates.

    To create a point in Montgomery coordinates:

    >>> MontgomeryPoint(curve, x, z)

    To create ap point in projective coordinates (notice the inversion
    of Y and Z!):

    >>> MontgomeryPoint(curve, x, z, y)
    """
    cdef readonly MyGFp2Element x, z
    cdef readonly y
    cdef readonly MontgomeryCurve curve

    def __init__(self, MontgomeryCurve E, MyGFp2Element x, MyGFp2Element z, y=None):
        self.curve = E
        self.x = x
        self.z = z
        self.y = y

    cpdef printPoint(self):
	    
        cdef MyGFp2Element a, b, c
		
        a = self.x
        b = self.y
        c = self.z
		
        print_GF(a._rep,"xmontgomery")
        print_GF(b._rep,"ymontgomery")
        print_GF(c._rep,"zmontgomery")
        self.curve.printCurve("mc")
		
  		
 

	

    cpdef MPoint getMPoint(MontgomeryPoint point):
        cdef GFW g1 = GFW()
        cdef GFW g2 = GFW()
        cdef GFW g3 = GFW()
        cdef GFW c1 = GFW(),
        cdef GFW c2 = GFW(),
        cdef GFW c3 = GFW(),
        
		
        cdef MyGFp2Element d, e, f, a, b, c
        cdef MCurve mc = MCurve()
        cdef mpoint = MPoint()
		
        d = point.x 
        e = point.y
        f = point.z
		
        g1.create( d._rep )
        g2.create( e._rep )
        g3.create( f._rep )
		
        a = point.curve.A
        b = point.curve.B
        c = point.curve.A24
        c1.create( a._rep )
        c2.create( b._rep )
        c3.create( c._rep )
        mc.createGFW(c1,c2,c3)
		
        mpoint.set_GFWy(g1, g2, g3, mc)
		
        return mpoint
		
    cpdef MontgomeryPoint scale(self):
        "Scale this point to have Z coordinate equal to 1."
        cdef MyGFp2Element iz
        if self.z.is_zero():
            return MontgomeryPoint(self.curve, self.x.parent().zero(), self.z, self.x.parent().one())
        else:
            iz = ~self.z
            if self.y is None:
                return MontgomeryPoint(self.curve, self.x * iz, self.x.parent().one())
            else:
                return MontgomeryPoint(self.curve, self.x * iz, self.x.parent().one(), self.y * iz)

    cpdef MontgomeryPoint lift(self):
        """
        If this point is in projective coordinates, do nothing.
        Otherwise, lift it (arbitrarily) to a point on the curve in
        projective coordinates.
        """
        cdef MyGFp2Element y
        if self not in self.curve:
            raise ValueError, "Point not on curve."
        if self.y is not None:
            return self
        elif self.z.is_zero():
            return self.curve.zero()
        else:
            y = ((self.x**3 + self.curve.A*self.x**2*self.z + self.x*self.z**2) / (self.curve.B*self.z)).sqrt()
            return MontgomeryPoint(self.curve, self.x, self.z, y)

    cpdef MontgomeryPoint to_Kummer(self):
        """
        Project this point to the Kummer line (i.e. forget its Y
        coordinate).
        """
        if self.y is None:
            return self
        else:
            return MontgomeryPoint(self.curve, self.x, self.z)

    @cython.profile(True)
    cpdef MontgomeryPoint doubling(self):
        "Double this point. Only Montgomery coordinates."
        cdef MyGFp2Element a, b, c

        a = (self.x + self.z).square()
        b = (self.x - self.z).square()
        c = a - b
        return MontgomeryPoint(self.curve,
                               a*b,
                               c*(b + self.curve.A24*c))

    @cython.profile(True)
    cpdef MontgomeryPoint dadd(self, MontgomeryPoint P, MontgomeryPoint diff):
        "Perform a differential addition. Only Montgomery coordinates."
        cdef MyGFp2Element da, cb

        da = (self.x + self.z)*(P.x - P.z)
        cb = (self.x - self.z)*(P.x + P.z)
        return MontgomeryPoint(self.curve,
                               diff.z*(da + cb).square(),
                               diff.x*(da - cb).square())
    
    @cython.profile(True)
    cpdef ladder(self, MontgomeryPoint P, MontgomeryPoint diff):
        "Perform one step of Montgomery ladder. Only Montgomery coordinates."
        cdef MyGFp2Element x1 = P.x._new_c()
        cdef MyGFp2Element z1 = P.x._new_c()
        cdef MyGFp2Element x2 = P.x._new_c()
        cdef MyGFp2Element z2 = P.x._new_c()
        cdef MontgomeryPoint P1, P2

        mont_ladder(&x1._rep, &z1._rep, &x2._rep, &z2._rep,
                     self.x._rep, self.z._rep, P.x._rep, P.z._rep,
                     diff.x._rep, diff.z._rep, self.curve.A24._rep)

        P1 = MontgomeryPoint(self.curve, x1, z1)
        P2 = MontgomeryPoint(self.curve, x2, z2)
        return P1, P2
        

    @cython.profile(True)
    cpdef MontgomeryPoint scalar(self, n):
        "Multiply this point by n. Only Montgomery coordinates."
        cdef MontgomeryPoint P1, P2

        n = abs(n)

        if self.z.is_zero():
            return self
        if n == 0:
            return self.curve.zero()
        elif n == 1:
            return self
        elif n == 2:
            return self.doubling()
        elif n == 3:
            P1 = self.doubling()
            return self.dadd(P1, self)
        elif n == 5:
            P1 = self.doubling()
            P2 = self.dadd(P1, self)
            return P1.dadd(P2, self)
        else:
            mask = 1
            m = n >> 1
            while m > 0:
                m >>= 1
                mask <<= 1

            mask >>= 1
            P1 = self
            P2 = self.doubling()
            while mask > 0:
                if n & mask:
                    P2, P1 = P2.ladder(P1, self)
                else:
                    P1, P2 = P1.ladder(P2, self)
                mask >>= 1

            return P1

    @cython.profile(True)
    cpdef MontgomeryPoint complete_add(self, MontgomeryPoint P):
        """
        Add this point with P.  Only projective coordinates.
        """
        cdef MyGFp2Element y1z2, x1z2, z1z2, u, uu, v, vv, vvv, R, A

        if self.y is None or P.y is None:
            raise ValueError, "Cannot add points on the Kummer line."

        y1z2 = self.y*P.z
        x1z2 = self.x*P.z
        z1z2 = self.z*P.z
        
     #   y1z2.printRep("y1z2")
     #   x1z2.printRep("x1z2")
     #   z1z2.printRep("z1z2")
        
        u = P.y*self.z - y1z2
        uu = u.square()
        v = P.x*self.z - x1z2
        vv = v.square()
        vvv = v*vv
        R = vv*x1z2
        A = (self.curve.B*uu - self.curve.A*vv)*z1z2 - vvv - 2*R

        return MontgomeryPoint(self.curve,
                               v*A,
                               vvv*z1z2,
                               u*(R-A) - vvv*y1z2)


    @cython.profile(True)
    cpdef MontgomeryPoint complete_double(self):
        """
        Double this point.  Only projective coordinates.
        """
        cdef MyGFp2Element xx, zz, w, yb, s, ss, sss, R, B, h

        if self.y is None:
            raise ValueError, "Lift the point first"
        
        xx = self.x.square()
        zz = self.z.square()
        w = 3*xx + 2*self.curve.A*self.x*self.z + zz
        yb = self.curve.B * self.y
        s = 2 * yb * self.z
        ss = s.square()
        sss = ss*s
        R = yb*s
        B = 2*self.x*R
        h = self.curve.B*w.square() - self.curve.A*ss - 2*B

        return MontgomeryPoint(self.curve,
                               h*s,
                               sss,
                               w*(B - h) - 2*ss*yb*self.y)

    @cython.profile(True)
    cpdef MontgomeryPoint complete_mul(self, n):
        "Multiply this point by n. Only projective coordinates."
        cdef MontgomeryPoint pow2a, sum

        pow2a = self
        while n & 1 == 0:
            pow2a += pow2a
            n = n >> 1
        sum = pow2a
        n = n >> 1
        while n != 0:
            pow2a += pow2a
            if n & 1:
                sum += pow2a
            n = n >> 1
        return sum

    # All the operations below work both for Montgomery and projective
    # coordinates.
    def __add__(self, MontgomeryPoint P):
        if self.is_zero():
            return P
        elif P.is_zero():
            return self
        elif (self.x*P.z == P.x*self.z):
            if (self.y*P.z == P.y*self.z):
                return self.complete_double()
            else:
                return self.curve.zero()
        else:
            return self.complete_add(P)

    def __sub__(self, MontgomeryPoint P):
        return self + (-P)

    def __neg__(self):
        if self.y is None:
            return self
        else:
            return MontgomeryPoint(self.curve, self.x, self.z, -self.y)

    def __mul__(self, n):
        if self.y is None:
            return self.scalar(n)
        else:
            if n < 0:
                return (-self)*(-n)
            if n == 0:
                return self.curve.zero()
            else:
                return self.complete_mul(n)

               
    cpdef is_zero(self):
        return self.z.is_zero()

    def weil_pairing(self, P, order):
        if self.y is None or P.y is None:
            raise ValueError, "The sign of the Weil pairing is undetermined on the Kummer line."
        E = self.curve.WeierstrassModel()
        P1 = self.scale()
        P2 = P.scale()
        P1 = E.point((P1.x/self.curve.B, P1.y/self.curve.B))
        P2 = E.point((P2.x/self.curve.B, P2.y/self.curve.B))
        return P1.weil_pairing(P2, order)
    
    def __repr__(self):
        if self.y is None:
            return "(%s : %s)" % (self.x, self.z)
        else:
            return "(%s : %s : %s)" % (self.x, self.y, self.z)


